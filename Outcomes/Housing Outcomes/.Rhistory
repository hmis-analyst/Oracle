Exits[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]
Exits_new <- Exits[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]
names(Exits_new)
names(MLE)
MLE$Parameter
logit <- MLE[1,"Estimate"]+rowSums(MLE[2:length(MLE[,1]),"Estimate"]*Exits[,as.character(MLE[2:length(MLE[,1]),"Parameter"])])
logit
exp(logit)/(exp(logit)+1)
MLE[2:length(MLE[,1]),"Estimate"]*Exits[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]
dat <- data.frame(a=c(1,2,3,4,5))
dat
dat2 <- data.frame(a=c(1,2,3,4,5),b=c(5,7,8,9,6),c=c(4,5,7,6,5),d=c(6,5,7,3,2),e=c(6,5,2,4,6))
dat
dat2
dat*dat2
dat$a
dat$a*dat2
MLE[2:length(MLE[,1])]
MLE[2:length(MLE[,1]),"Estimate"]
Exits[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]
dat15 <- dat[1:15,]
dat15
dat
Exits15 <- Exits[1:15,as.character(MLE[2:length(MLE[,1]),"Parameter"])]
Exits15
MLE15 <- MLE[2:length(MLE[,1]),"Estimate"]
MLE15*Exits15
MLE15
class(MLE15)
mode(MLE15)
class(Exits15)
mode(Exits15)
class(dat2)
mode(dat2)
length(MLE15)
length(Exits15)
dat <- data.frame(a=c(1,2,3))
dat2 <- data.frame(a=c(1,2,3),b=c(4,5,6),c=c(7,8,9))
dat*dat2
dat$a*dat2
dat2 <- data.frame(a=c(1,2,3),b=c(4,5,6),c=c(7,8,9),d=c(5,6,7))
dat$a*dat2
dat2 <- data.frame(a=c(1,2,3,4),b=c(4,5,6,7),c=c(7,8,9,10))
dat$a*dat2
dat$a
dat2
dat$a*dat2
t(dat2)
dat$a*t(dat2)
t(dat$a*t(dat2))
dat2
as.data.frame(t(dat$a*t(dat2)))
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
##########################################################################
# Title: Calculating Reference Outcome Scores for Destinations App
# Programmer: Jason Rodriguez
# Last updated: 7/12/2014
# Output file: Program data_[program type]_[SFY].csv
##########################################################################
library(plyr)
setwd("Z:/Documents/Pathways/Pred Measures/Datasets")
#--------------
# USER INPUT
# Specify program type (ES, TH, RapidReHousing, PSH, or Prevention)
prog_type_long <- "Prevention"
#--------------
prog_type <- switch(prog_type_long,
"ES" = "ES",
"TH" = "TH",
"PSH" = "PSH",
"RapidReHousing" = "RRH",
"Prevention" = "Prev"
)
# Read HMIS Predictors query into new object.
# This requires that query was outputted to the HMIS Predictors.csv file beforehand.
# Run Predictor Query [date].r to update this file.
query <- read.csv("Exits_SFY2014_Rec.csv")
query <- query[which(query$Z_PROGRAM_TYPE==prog_type_long),]
setwd("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes/lib")
# Import maximum likelihood estimates (MLE) for selected program type
MLE <- read.csv(paste("MLE",prog_type,"SFY2014.csv",sep="_"))
# Compute logits
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])])))
# Compute permanent destination likelihoods
likelihood <- exp(logit)/(exp(logit)+1)
# Create new data frame showing program key, likelihood, and actual outcome for each client
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
likelihood
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(t(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])])))
)
likelihood <- exp(logit)/(exp(logit)+1)
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
##########################################################################
# Title: Calculating Reference Outcome Scores for Destinations App
# Programmer: Jason Rodriguez
# Last updated: 7/12/2014
# Output file: Program data_[program type]_[SFY].csv
##########################################################################
library(plyr)
setwd("Z:/Documents/Pathways/Pred Measures/Datasets")
#--------------
# USER INPUT
# Specify program type (ES, TH, RapidReHousing, PSH, or Prevention)
prog_type_long <- "ES"
#--------------
prog_type <- switch(prog_type_long,
"ES" = "ES",
"TH" = "TH",
"PSH" = "PSH",
"RapidReHousing" = "RRH",
"Prevention" = "Prev"
)
# Read HMIS Predictors query into new object.
# This requires that query was outputted to the HMIS Predictors.csv file beforehand.
# Run Predictor Query [date].r to update this file.
query <- read.csv("Exits_SFY2014_Rec.csv")
query <- query[which(query$Z_PROGRAM_TYPE==prog_type_long),]
setwd("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes/lib")
# Import maximum likelihood estimates (MLE) for selected program type
MLE <- read.csv(paste("MLE",prog_type,"SFY2014.csv",sep="_"))
# Compute logits
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(t(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]))))
# Compute permanent destination likelihoods
likelihood <- exp(logit)/(exp(logit)+1)
# Create new data frame showing program key, likelihood, and actual outcome for each client
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
##########################################################################
# Title: Calculating Reference Outcome Scores for Destinations App
# Programmer: Jason Rodriguez
# Last updated: 7/12/2014
# Output file: Program data_[program type]_[SFY].csv
##########################################################################
library(plyr)
setwd("Z:/Documents/Pathways/Pred Measures/Datasets")
#--------------
# USER INPUT
# Specify program type (ES, TH, RapidReHousing, PSH, or Prevention)
prog_type_long <- "TH"
#--------------
prog_type <- switch(prog_type_long,
"ES" = "ES",
"TH" = "TH",
"PSH" = "PSH",
"RapidReHousing" = "RRH",
"Prevention" = "Prev"
)
# Read HMIS Predictors query into new object.
# This requires that query was outputted to the HMIS Predictors.csv file beforehand.
# Run Predictor Query [date].r to update this file.
query <- read.csv("Exits_SFY2014_Rec.csv")
query <- query[which(query$Z_PROGRAM_TYPE==prog_type_long),]
setwd("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes/lib")
# Import maximum likelihood estimates (MLE) for selected program type
MLE <- read.csv(paste("MLE",prog_type,"SFY2014.csv",sep="_"))
# Compute logits
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(t(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]))))
# Compute permanent destination likelihoods
likelihood <- exp(logit)/(exp(logit)+1)
# Create new data frame showing program key, likelihood, and actual outcome for each client
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
##########################################################################
# Title: Calculating Reference Outcome Scores for Destinations App
# Programmer: Jason Rodriguez
# Last updated: 7/12/2014
# Output file: Program data_[program type]_[SFY].csv
##########################################################################
library(plyr)
setwd("Z:/Documents/Pathways/Pred Measures/Datasets")
#--------------
# USER INPUT
# Specify program type (ES, TH, RapidReHousing, PSH, or Prevention)
prog_type_long <- "RapidReHousing"
#--------------
prog_type <- switch(prog_type_long,
"ES" = "ES",
"TH" = "TH",
"PSH" = "PSH",
"RapidReHousing" = "RRH",
"Prevention" = "Prev"
)
# Read HMIS Predictors query into new object.
# This requires that query was outputted to the HMIS Predictors.csv file beforehand.
# Run Predictor Query [date].r to update this file.
query <- read.csv("Exits_SFY2014_Rec.csv")
query <- query[which(query$Z_PROGRAM_TYPE==prog_type_long),]
setwd("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes/lib")
# Import maximum likelihood estimates (MLE) for selected program type
MLE <- read.csv(paste("MLE",prog_type,"SFY2014.csv",sep="_"))
# Compute logits
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(t(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]))))
# Compute permanent destination likelihoods
likelihood <- exp(logit)/(exp(logit)+1)
# Create new data frame showing program key, likelihood, and actual outcome for each client
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
##########################################################################
# Title: Calculating Reference Outcome Scores for Destinations App
# Programmer: Jason Rodriguez
# Last updated: 7/12/2014
# Output file: Program data_[program type]_[SFY].csv
##########################################################################
library(plyr)
setwd("Z:/Documents/Pathways/Pred Measures/Datasets")
#--------------
# USER INPUT
# Specify program type (ES, TH, RapidReHousing, PSH, or Prevention)
prog_type_long <- "PSH"
#--------------
prog_type <- switch(prog_type_long,
"ES" = "ES",
"TH" = "TH",
"PSH" = "PSH",
"RapidReHousing" = "RRH",
"Prevention" = "Prev"
)
# Read HMIS Predictors query into new object.
# This requires that query was outputted to the HMIS Predictors.csv file beforehand.
# Run Predictor Query [date].r to update this file.
query <- read.csv("Exits_SFY2014_Rec.csv")
query <- query[which(query$Z_PROGRAM_TYPE==prog_type_long),]
setwd("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes/lib")
# Import maximum likelihood estimates (MLE) for selected program type
MLE <- read.csv(paste("MLE",prog_type,"SFY2014.csv",sep="_"))
# Compute logits
logit <- MLE[1,"Estimate"]+rowSums(as.data.frame(t(MLE[2:length(MLE[,1]),"Estimate"]*t(query[,as.character(MLE[2:length(MLE[,1]),"Parameter"])]))))
# Compute permanent destination likelihoods
likelihood <- exp(logit)/(exp(logit)+1)
# Create new data frame showing program key, likelihood, and actual outcome for each client
program_data <- data.frame(
PROGRAM_KEY = query$Z_PROGRAM_KEY,
likelihood = likelihood,
Dest_Perm_90 = ifelse(is.na(query$Dest_Perm_90),0,query$Dest_Perm_90)
)
# Reduce program data to clients where a likelihood has been computed
program_data_valid <- program_data[which(!is.na(program_data$likelihood)),]
# Aggregate the data into program-level statistics
program_data_p <- ddply(program_data_valid,"PROGRAM_KEY",summarize,p=mean(likelihood))
program_data_agg <- ddply(program_data,"PROGRAM_KEY",summarize,dest_perm=sum(Dest_Perm_90),n=length(PROGRAM_KEY))
program_data_agg2 <- merge(program_data_p,program_data_agg,by="PROGRAM_KEY",all.x=TRUE,all.y=TRUE)
#Calculate Adjusted Outcome Scores, based on phi statistic
attach(program_data_agg2)
program_data_agg2$adjscore <- NA
for (i in 1:length(program_data_agg2[,1])) {
if(!is.na(program_data_agg2$p[i])) {
phi <- chisq.test(x=c(dest_perm[i],n[i]-dest_perm[i]),p=c(p[i],1-p[i]))$statistic[[1]]/n[i]
phi2 <- ifelse(dest_perm[i]/n[i] < p[i], phi*-1, phi)
phi3 <- ifelse(phi2 < -1, -100, ifelse(phi2 > 1, 100, phi2*100))
phi4 <- phi3/2+50
program_data_agg2$adjscore[i] <- phi4
}
}
# Discard programs where 10 or fewer clients exited during SFY 2014
program_data_agg3 <- program_data_agg2[which(n>10),]
detach(program_data_agg2)
# Divide programs' Adjusted Outcome Scores into deciles
attach(program_data_agg3)
program_data_agg3$decile <- cbind(cut(1-p,quantile(1-p,(0:10)/10,na.rm=TRUE),include.lowest=TRUE))
detach(program_data_agg3)
program_data_agg4 <- merge(program_data_agg2,program_data_agg3[,c("PROGRAM_KEY","decile")],by="PROGRAM_KEY",all.x=TRUE)
# Set the default for "Exclude" to missing.
# User can manually exclude a program by opening CSV file and typing any value into the Exclude column.
program_data_agg4$exclude <- NA
# Draw a histogram of Adjusted Outcome Scores. For any outliers, set Exclude=1. Redraw histogram.
hist(program_data_agg4[which(!is.na(program_data_agg4$decile)),"adjscore"])
# program_data_agg4[which(program_data_agg4$adjscore <40),"exclude"] <- 1
hist(program_data_agg4[which(!is.na(program_data_agg4$decile) & is.na(program_data_agg4$exclude)),"adjscore"])
# Save program-level performance scores
write.csv(program_data_agg4,file=paste("Prog data",prog_type,"SFY2014.csv",sep="_"),na="",row.names=FALSE)
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
dat <- c(1,2,3,4,5)
dat2 <- dat[which(dat==6)]
dat2
length(dat2)
length(dat2[,1])
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
shiny::runApp("Z:/GitHub/shiny-apps-oracle/Outcomes/Housing Outcomes")
